import { Injectable } from '@angular/core';
import { Glpexception } from 'app/shared/exception';
import { DataService } from 'app/shared/service.helper';
import { Http, Response, Headers, RequestOptionsArgs, RequestOptions } from '@angular/http';
import { Appconstants } from 'app/app.constant';

@Injectable()
export class WorkflowService extends Glpexception {
    constructor(private helper: DataService) {
    super();
    }
    loadRequest(Data: any) {
        const headers = new Headers({});
        headers.append('Content-Type', 'application/json');
        return this.helper.requestPost(this.geturlWorkflow('getMyRequestData'), Data, headers).map
        (this.sendDataToComponent).catch(this.sendErrorToCompnent);
    }

    getServiceRequestData(Data: any) {
        const headers = new Headers({});
        headers.append('Content-Type', 'application/json');
        return this.helper.requestPost(this.geturlWorkflow('getServiceRequestData'), Data, headers).map
        (this.sendDataToComponent).catch(this.sendErrorToCompnent);
    }

    approveRequest(serviceRequestId: Number, functionName: string, remarks: string) {
        const headers = new Headers({});
        const Data = {
            serviceRequestId: serviceRequestId,
            workflowFunction: functionName,
            remarks: remarks
        };
        headers.append('Content-Type', 'application/json');
        return this.helper.requestPost(this.geturlWorkflow('approveMyRequest'), Data, headers).map
        (this.sendDataToComponent).catch(this.sendErrorToCompnent);
    }

    rejectRequest(serviceRequestId: Number, functionName: string, remarks: string) {
        const headers = new Headers({});
        const Data = {
            serviceRequestId: serviceRequestId,
            workflowFunction: functionName,
            remarks: remarks
        };
        headers.append('Content-Type', 'application/json');
        return this.helper.requestPost(this.geturlWorkflow('rejectMyRequest'), Data, headers).map
        (this.sendDataToComponent).catch(this.sendErrorToCompnent);
    }


    geturlWorkflow(url: String) {
        return Appconstants.API_END_POINT_WORKFLOW + url;
    }

    uploadFileAttachment(Data: FormData, folderName: string) {
    const url = Appconstants.PARTNER_BASE_URL + Appconstants.UPLOADFILE;
    const headers = new Headers();
    Data.append('awsFolderName', folderName);
    return this.helper.requestPost(url, Data, headers).map
    (this.sendDataToComponent).catch(this.sendErrorToCompnent);
     }

}
